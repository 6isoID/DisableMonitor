/** * DisableMonitor, Disable Monitors on Mac * * Copyright (C) 2014 Tobias Salzmann * * DisableMonitor is free software: you can redistribute it and/or modify it under the terms of the * GNU General Public License as published by the Free Software Foundation, either version 2 of the * License, or (at your option) any later version. * * DisableMonitor is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * * See the GNU General Public License for more details. You should have received a copy of the GNU * General Public License along with DisableMonitor. If not, see <http://www.gnu.org/licenses/>. * * Authors: Tobias Salzmann */#import <Cocoa/Cocoa.h>#import "DisableMonitorAppDelegate.h"#import "DisplayIDAndName.h"int main(int argc, char *argv[]){    NSArray *arguments = [[NSProcessInfo processInfo] arguments];    for (NSString* arg in arguments)    {        if ([arg caseInsensitiveCompare:@"-list"] == NSOrderedSame)        {            NSMutableArray *dict = [DisableMonitorAppDelegate GetSortedDisplays];            if (dict == nil)            {                printf("No Displays found");                return 0;            }            else            {                printf(" ID         Name\n");                printf("----------- -----------------\n");                for (DisplayIDAndName* idAndName in dict)                {                    printf(" %-10u %s\n", [idAndName id], [[idAndName name] UTF8String]);                }                printf("----------- -----------------\n");                [dict release];            }            return 0;        }        else if ([arg caseInsensitiveCompare:@"-disable"] == NSOrderedSame)        {            DisplayData *dp = [[DisplayData alloc] init];            [dp setDisplay: [[NSUserDefaults standardUserDefaults] integerForKey:@"disable"]];            [DisableMonitorAppDelegate ToggleMonitor:dp enabled:NO];            [dp release];            return 0;        }        else if ([arg caseInsensitiveCompare:@"-d"] == NSOrderedSame)        {            DisplayData *dp = [[DisplayData alloc] init];            [dp setDisplay: [[NSUserDefaults standardUserDefaults] integerForKey:@"d"]];            [DisableMonitorAppDelegate ToggleMonitor:dp enabled:NO];            [dp release];            return 0;        }        else if ([arg caseInsensitiveCompare:@"-enable"] == NSOrderedSame)        {            DisplayData *dp = [[DisplayData alloc] init];            [dp setDisplay: [[NSUserDefaults standardUserDefaults] integerForKey:@"enable"]];            [DisableMonitorAppDelegate ToggleMonitor:dp enabled:YES];            [dp release];            return 0;        }        else if ([arg caseInsensitiveCompare:@"-e"] == NSOrderedSame)        {            DisplayData *dp = [[DisplayData alloc] init];            [dp setDisplay: [[NSUserDefaults standardUserDefaults] integerForKey:@"e"]];            [DisableMonitorAppDelegate ToggleMonitor:dp enabled:YES];            [dp release];            return 0;        }    }        return NSApplicationMain(argc,  (const char **) argv);}